// <auto-generated />
using Configurator_PC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Configurator_PC.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250425184945_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Configurator_PC.Models.Compatibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Component1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Component2Id")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsCompatible")
                        .HasColumnType("boolean");

                    b.Property<int>("ParameterNameId")
                        .HasColumnType("integer");

                    b.Property<string>("Value1")
                        .HasColumnType("text");

                    b.Property<string>("Value2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Component1Id");

                    b.HasIndex("Component2Id");

                    b.HasIndex("ParameterNameId");

                    b.ToTable("compatibility", (string)null);
                });

            modelBuilder.Entity("Configurator_PC.Models.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("components", (string)null);
                });

            modelBuilder.Entity("Configurator_PC.Models.ComponentParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.Property<int>("ParameterNameId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ParameterNameId");

                    b.ToTable("parameters", (string)null);
                });

            modelBuilder.Entity("Configurator_PC.Models.ComponentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("component_types", (string)null);
                });

            modelBuilder.Entity("Configurator_PC.Models.ComponentTypeParameterName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ParameterNameId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParameterNameId");

                    b.HasIndex("TypeId");

                    b.ToTable("component_type_parameter_names", (string)null);
                });

            modelBuilder.Entity("Configurator_PC.Models.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("configurations", (string)null);
                });

            modelBuilder.Entity("Configurator_PC.Models.ConfigurationComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("configuration_components", (string)null);
                });

            modelBuilder.Entity("Configurator_PC.Models.ParameterName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("parameter_names", (string)null);
                });

            modelBuilder.Entity("Configurator_PC.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Password")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Configurator_PC.Models.Compatibility", b =>
                {
                    b.HasOne("Configurator_PC.Models.Component", "Component1")
                        .WithMany()
                        .HasForeignKey("Component1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Configurator_PC.Models.Component", "Component2")
                        .WithMany()
                        .HasForeignKey("Component2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Configurator_PC.Models.ParameterName", "ParameterName")
                        .WithMany("Compatibilities")
                        .HasForeignKey("ParameterNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component1");

                    b.Navigation("Component2");

                    b.Navigation("ParameterName");
                });

            modelBuilder.Entity("Configurator_PC.Models.Component", b =>
                {
                    b.HasOne("Configurator_PC.Models.ComponentType", "Type")
                        .WithMany("Components")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Configurator_PC.Models.ComponentParameter", b =>
                {
                    b.HasOne("Configurator_PC.Models.Component", "Component")
                        .WithMany("Parameters")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Configurator_PC.Models.ParameterName", "ParameterName")
                        .WithMany("ComponentParameters")
                        .HasForeignKey("ParameterNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("ParameterName");
                });

            modelBuilder.Entity("Configurator_PC.Models.ComponentTypeParameterName", b =>
                {
                    b.HasOne("Configurator_PC.Models.ParameterName", "ParameterName")
                        .WithMany("ComponentTypeLinks")
                        .HasForeignKey("ParameterNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Configurator_PC.Models.ComponentType", "Type")
                        .WithMany("AllowedParameterNames")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParameterName");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Configurator_PC.Models.ConfigurationComponent", b =>
                {
                    b.HasOne("Configurator_PC.Models.Component", "Component")
                        .WithMany("ConfigurationComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Configurator_PC.Models.Configuration", "Configuration")
                        .WithMany("ConfigurationComponents")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Configurator_PC.Models.Component", b =>
                {
                    b.Navigation("ConfigurationComponents");

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("Configurator_PC.Models.ComponentType", b =>
                {
                    b.Navigation("AllowedParameterNames");

                    b.Navigation("Components");
                });

            modelBuilder.Entity("Configurator_PC.Models.Configuration", b =>
                {
                    b.Navigation("ConfigurationComponents");
                });

            modelBuilder.Entity("Configurator_PC.Models.ParameterName", b =>
                {
                    b.Navigation("Compatibilities");

                    b.Navigation("ComponentParameters");

                    b.Navigation("ComponentTypeLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
